# Ime pipeline-a za backend
name: Backend CI/CD

# Sprožilci (push in pull_request na glavno vejo)
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Gradnja in priprava backenda
  build-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository  # Kloniranje repozitorija
      uses: actions/checkout@v3

    - name: Set up Node.js  # Nastavitev Node.js okolja
      uses: actions/setup-node@v3
      with:
        node-version: '16'  # Verzija Node.js

    - name: Cache node_modules  # Caching odvisnosti
      uses: actions/cache@v3
      with:
        path: backend/node_modules  # Pot do node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-

    - name: Install dependencies  # Namestitev odvisnosti
      run: npm ci
      working-directory: backend

    - name: Build backend  # Gradnja aplikacije (če je potrebno)
      run: npm run build
      working-directory: backend

    - name: Upload backend artifacts  # Nalaganje gradbenih artefaktov
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: |
          backend/
          backend/node_modules/

  # Testiranje backenda
  test-backend:
    needs: build-backend  # Izvajanje po uspešni gradnji
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository  # Kloniranje repozitorija
      uses: actions/checkout@v3

    - name: Set up Node.js  # Nastavitev Node.js okolja
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Cache node_modules  # Caching odvisnosti
      uses: actions/cache@v3
      with:
        path: backend/node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-

    - name: Install dependencies  # Namestitev odvisnosti
      run: npm ci
      working-directory: backend

    - name: Run tests and generate coverage report  # Izvajanje testov s pokritostjo
      run: |
        npm test -- --watchAll=false --coverage
      working-directory: backend

    - name: Upload Coverage Report  # Naložitev poročila o pokritosti kode
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend/coverage/

  # Deploy backenda (opcijsko)
  deploy-backend:
    needs: test-backend  # Izvajanje po uspešnem testiranju
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Samo na glavni veji

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Deploy application  # Ukaz za deploy (prilagodite glede na infrastrukturo)
      run: |
        echo "Deploying backend to production..."
        # Primer: SSH v strežnik in zagon ukazov
        # ssh user@server "cd /path/to/backend && docker-compose up -d"
